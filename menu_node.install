<?php

// $Id$

/**
 * @file
 *   Install file for Menu Node API.
 */

/**
 * Implements hook_schema().
 */
function menu_node_schema() {
  $schema['menu_node'] = array(
    'fields' => array(
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'mlid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0)),
    'primary key' => array('mlid'),
    'indexes' => array(
      'nid' => array('nid'),
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
      'mlid' => array('menu_links' => 'mlid'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_enable().
 *
 * On module enable, populate the {menu_node} table
 * based on existing menu items.
 */
function menu_node_enable() {
  $items = array();
  $result = db_query("SELECT ml.mlid, ml.link_path FROM {menu_links} ml INNER JOIN {menu_custom} mc ON ml.menu_name = mc.menu_name WHERE ml.link_path LIKE 'node/%' AND ml.router_path = 'node/%%'");
  while ($data = db_fetch_object($result)) {
    $nid = str_replace('node/', '', $data->link_path);
    // Ensure that we did not grab any bad links accidentally.
    $check = (bool) db_result(db_query("SELECT COUNT(*) FROM {node} WHERE nid = %d", $nid));
    if ($check) {
      db_query("INSERT INTO {menu_node} (nid, mlid) VALUES (%d, %d)", $nid, $data->mlid);
    }
  }
}

/**
 * Implements hook_disable().
 *
 * On module disable, erase the {menu_node} table.
 */
function menu_node_disable() {
  db_query("DELETE FROM {menu_node}");
}

/**
 * Update function to remove book module entries.
 */
function menu_node_update_6000() {
  $ret = array();
  if (module_exists('book')) {
    $result = db_query("SELECT mlid, nid FROM {book}");
    while ($data = db_fetch_object($result)) {
      menu_node_delete($data->nid, $data->mlid);
    }
  }
  return $ret;
}

/**
 * Erase bad records from the {menu_node} table.
 */
function menu_node_update_6001() {
  $return = array();
  $result = db_query("SELECT mn.mlid, mn.nid FROM {menu_node} mn LEFT JOIN {node} n ON mn.nid = n.nid LEFT JOIN {menu_links} ml ON ml.mlid = mn.mlid WHERE n.nid IS NULL OR ml.mlid IS NULL");
  while ($data = db_fetch_object($result)) {
    $return[] = update_sql("DELETE FROM {menu_node} WHERE mlid = $data->mlid AND nid = $data->nid");
  }
  return $return;
}

/**
 * Update to the new schema with only mlid as primary key.
 */
function menu_node_update_6002() {
  $ret = array();
  db_drop_primary_key($ret, 'menu_node');
  db_drop_index($ret, 'menu_node', 'nid');
  db_add_primary_key($ret, 'menu_node', array('mlid'));
  db_add_index($ret, 'menu_node', 'nid', array('nid'));
  return $ret;
}
